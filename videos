
#FLOYD WARSHELL

#METHOD 1

# Floyd Warshall Algorithm in python
import copy

# The number of vertices
nV = 4

INF = 999


# Algorithm implementation
def floyd_warshall(G):
    distance=copy.deepcopy(G)
    for k in range(nV):
        for i in range(nV):
            for j in range(nV):
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])
    print_solution(distance)


# Printing the solution
def print_solution(distance):
    for i in range(nV):
        for j in range(nV):
            if(distance[i][j] == INF):
                print("INF", end=" ")
            else:
                print(distance[i][j], end="  ")
        print(" ")


G = [[0, 3, INF, 5],
         [2, 0, INF, 4],
         [INF, 1, 0, INF],
         [INF, INF, 2, 0]]
floyd_warshall(G)

print(G)

#METHOD 2

inf = 999999999
v = 4

def shortestpath(graph,v):
    g = graph
    for k in range(v):
        for i in range(v):
            for j in range(v):
                g[i][j] = min(g[i][j],g[i][k]+g[k][j])
    return g



graph = [[0,1,6,inf],
         [0,5,inf,inf],
         [2,3,0,inf],
         [inf,inf,inf,0]]

path = shortestpath(graph ,v)


for i in range(v):
    for j in range(v):
        if path[i][j]==inf:
            print('inf',end=' ')
        else:
            print(path[i][j],end=' ')

    if j==v-1:
        print()

#METHOD 3

# Floyd Warshall Algorithm in python
import copy

# The number of vertices
nV = 4

INF = 999


# Algorithm implementation
def floyd_warshall(G):
    distance=copy.deepcopy(G)

    # Adding vertices individually
    for k in range(nV):
        for i in range(nV):
            for j in range(nV):
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])
    print_solution(distance)


# Printing the solution
def print_solution(distance):
    for i in range(nV):
        for j in range(nV):
            if(distance[i][j] == INF):
                print("INF", end=" ")
            else:
                print(distance[i][j], end="  ")
        print(" ")


G = [[0, 3, INF, 5],
         [2, 0, INF, 4],
         [INF, 1, 0, INF],
         [INF, INF, 2, 0]]
floyd_warshall(G)

print(G)


#TRAVEL SALESMAN PROBLEM OR DISTANCE BETWEEN CITIES
#QUESTION 3

# Python3 program to implement traveling salesman
# problem using naive approach.
# from sys import maxsize
from itertools import permutations
V = 4

# implementation of traveling Salesman Problem
def travellingSalesmanProblem(graph, s):

    # store all vertex apart from source vertex
    vertex = [i for i in range(V) if i!=s]

    # store minimum weight Hamiltonian Cycle
    min_path = 99999
    next_permutation=permutations(vertex)
    for i in next_permutation:
        print('i:',i)

        # store current Path weight(cost)
        current_pathweight = 0

        # compute current path weight
        k = s
        for j in i:
            current_pathweight += graph[k][j]
            k = j
            print(current_pathweight)
        current_pathweight += graph[k][s]
        print('out:',current_pathweight)

        # update minimum
        min_path = min(min_path, current_pathweight)

    return min_path


# Driver Code
if __name__ == "__main__":

    # matrix representation of graph
    graph = [[0, 10, 15, 20], 
             [10, 0, 35, 25],
             [15, 35, 0, 30],
             [20, 25, 30, 0]]
    s = 3
    print(travellingSalesmanProblem(graph, s))

#TRAVELLING SALESMAN PROBLEM METHOD 2:
    
#P2
# Given a set of cities and distances between every pair of cities,
# find the shortest possible route that visits every city exactly once and returns to 
# the starting point.
n = 4 
dist = [[0, 0, 0, 0, 0], [0, 0, 10, 15, 20], [
0, 10, 0, 25, 25], [0, 15, 25, 0, 30], [0, 20, 25, 30, 0]]
memo = [[-1]*(1 << (n+1)) for _ in range(n+1)]
def fun(i, mask):
    if mask == ((1 << i) | 3):
        return dist[1][i]
    if memo[i][mask] != -1:
        return memo[i][mask]
    res = 10**9 
    for j in range(1, n+1):
        if (mask & (1 << j)) != 0 and j != i and j != 1:
            res = min(res, fun(j, mask & (~(1 << i))) + dist[j][i])
            memo[i][mask] = res 
    return res
ans = 10**9
for i in range(1, n+1):
    ans = min(ans, fun(i, (1 << (n+1))-1) + dist[i][1])
print("The cost of most efficient tour = " + str(ans))
#TSP
from sys import maxsize
from itertools import permutations
V = 4
def travellingSalesmanProblem(graph, s):
	vertex = []
	for i in range(V):
		if i != s:
			vertex.append(i)
	min_path = maxsize
	next_permutation=permutations(vertex)
	for i in next_permutation:
		current_pathweight = 0
		k = s
		for j in i:
			current_pathweight += graph[k][j]
			k = j
		current_pathweight += graph[k][s]
		min_path = min(min_path, current_pathweight)	
	return min_path
if __name__ == "__main__":
	graph = [[0, 10, 15, 20], [10, 0, 35, 25],
			[15, 35, 0, 30], [20, 25, 30, 0]]
	s = 0
	print(travellingSalesmanProblem(graph, s))    


#N QUEENS IN NxN BOARD question 3(Back tracking using recursion)

N = int(input("Enter the number of queens :"))

board = [[0]*N for _ in range(N)]

def is_attack(i, j):
    for k in range(0,N):
        if board[i][k]=='Q' or board[k][j]=='Q':
            return True
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]=='Q':
                    return True
    return False

def N_queen(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(is_attack(i,j))) and (board[i][j]!='Q'):
                board[i][j] = 'Q'
                if N_queen(n-1)==True:
                    return True
                board[i][j] = 0

    return False

if N_queen(N)==True:
    print('\nPossible')
    for i in board:
        print (*i,sep=" ")
else:
    print('\nNot possible')


#Implement a method to solve 'n' queens problem using backtracking approach.
global N
N = 4
def printSolution(board):
	for i in range(N):
		for j in range(N):
			print(board[i][j], end = " ")
		print()
def isSafe(board, row, col):
	for i in range(col):
		if board[row][i] == 1:
			return False
	for i, j in zip(range(row, -1, -1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False
	for i, j in zip(range(row, N, 1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False
	return True
def solveNQUtil(board, col):
	if col >= N:
		return True
	for i in range(N):
		if isSafe(board, i, col):
			board[i][col] = 1
			if solveNQUtil(board, col + 1) == True:
				return True
			board[i][col] = 0
	return False
def solveNQ():
	board = [ [0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0] ]
	if solveNQUtil(board, 0) == False:
		print ("Solution does not exist")
		return False
	printSolution(board)
	return True
solveNQ()


#QUESTION 1 NEGATIVE WEIGHT

import sys

# Recursive function to print the path of a given vertex from source vertex
def getPath(parent, vertex):
    if vertex < 0:
        return []
    return getPath(parent, parent[vertex]) + [vertex]

# Function to run the BellmanΓÇôFord algorithm from a given source
def bellmanFord(edges, source, n):
    # distance[] and parent[] stores the shortest path (least cost/path) info
    distance = [sys.maxsize] * n
    parent = [-1] * n

    # Initially, all vertices except source vertex weight INFINITY and no parent
    distance[source] = 0

    # relaxation step (run V-1 times)
    for k in range(n - 1):
        # edge from `u` to `v` having weight `w`
        for (u, v, w) in edges:
            # if the distance to destination `v` can be shortened by taking edge (u, v)
            if distance[u] != sys.maxsize and distance[u] + w < distance[v]:
                # update distance to the new lower value
                distance[v] = distance[u] + w
                # set v's parent as `u`
                parent[v] = u

    # run relaxation step once more for n'th time to check for negative-weight cycles
    for (u, v, w) in edges:  # edge from `u` to `v` having weight `w`
        # if the distance to destination `u` can be shortened by taking edge (u, v)
        if distance[u] != sys.maxsize and distance[u] + w < distance[v]:
            print('Negative-weight cycle is found!!')
            return

    for i in range(n):
        if i != source and distance[i] < sys.maxsize:
            print(f'The distance of vertex {i} from vertex {source} is {distance[i]}. '
                  f'Its path is', getPath(parent, i))


if __name__ == '__main__':

    # of graph edges as per the above diagram
    edges = [
        # (x, y, w) ΓÇö> edge from `x` to `y` having weight `w`
        (0, 1, -1), (0, 2, 4), (1, 2, 3), (1, 3, 2),
        (1, 4, 2), (3, 2, 5), (3, 1, 1), (4, 3, -3)
    ]

    # set the maximum number of nodes in the graph
    n = 5

    # run the BellmanΓÇôFord algorithm from every node
    for source in range(n):
        bellmanFord(edges, source, n)


# question 2 method 2

n = 4 # there are four nodes in example graph (graph is 1-based)

# dist[i][j] represents shortest distance to go from i to j
# this matrix can be calculated for any given graph using
# all-pair shortest path algorithms
dist = [[0, 0, 0, 0, 0], [0, 0, 10, 15, 20], [
	0, 10, 0, 25, 25], [0, 15, 25, 0, 30], [0, 20, 25, 30, 0]]

# memoization for top down recursion
memo = [[-1]*(1 << (n+1)) for _ in range(n+1)]


def fun(i, mask):
	# base case
	# if only ith bit and 1st bit is set in our mask,
	# it implies we have visited all other nodes already
	if mask == ((1 << i) | 3):
		return dist[1][i]

	# memoization
	if memo[i][mask] != -1:
		return memo[i][mask]

	res = 10**9 # result of this sub-problem

	# we have to travel all nodes j in mask and end the path at ith node
	# so for every node j in mask, recursively calculate cost of
	# travelling all nodes in mask
	# except i and then travel back from node j to node i taking
	# the shortest path take the minimum of all possible j nodes
	for j in range(1, n+1):
		if (mask & (1 << j)) != 0 and j != i and j != 1:
			res = min(res, fun(j, mask & (~(1 << i))) + dist[j][i])
	memo[i][mask] = res # storing the minimum value
	return res


# Driver program to test above logic
ans = 10**9
for i in range(1, n+1):
	# try to go from node 1 visiting all nodes in between to i
	# then return from i taking the shortest route to 1
	ans = min(ans, fun(i, (1 << (n+1))-1) + dist[i][1])

print("The cost of most efficient tour = " + str(ans))


# Python3 Program for Floyd Warshall Algorithm

# Number of vertices in the graph
V = 4

# Define infinity as the large
# enough value. This value will be
# used for vertices not connected to each other
INF = 99999

# Solves all pair shortest path
# via Floyd Warshall Algorithm


def floydWarshall(graph):
	""" dist[][] will be the output
	matrix that will finally
		have the shortest distances
		between every pair of vertices """
	""" initializing the solution matrix
	same as input graph matrix
	OR we can say that the initial
	values of shortest distances
	are based on shortest paths considering no
	intermediate vertices """

	dist = list(map(lambda i: list(map(lambda j: j, i)), graph))

	""" Add all vertices one by one
	to the set of intermediate
	vertices.
	---> Before start of an iteration,
	we have shortest distances
	between all pairs of vertices
	such that the shortest
	distances consider only the
	vertices in the set
	{0, 1, 2, .. k-1} as intermediate vertices.
	----> After the end of a
	iteration, vertex no. k is
	added to the set of intermediate
	vertices and the
	set becomes {0, 1, 2, .. k}
	"""
	for k in range(V):

		# pick all vertices as source one by one
		for i in range(V):

			# Pick all vertices as destination for the
			# above picked source
			for j in range(V):

				# If vertex k is on the shortest path from
				# i to j, then update the value of dist[i][j]
				dist[i][j] = min(dist[i][j],
								dist[i][k] + dist[k][j]
								)
	printSolution(dist)


# A utility function to print the solution
def printSolution(dist):
	print("Following matrix shows the shortest distances\
between every pair of vertices")
	for i in range(V):
		for j in range(V):
			if(dist[i][j] == INF):
				print("%7s" % ("INF"), end=" ")
			else:
				print("%7d\t" % (dist[i][j]), end=' ')
			if j == V-1:
				print()


# Driver's code
if __name__ == "__main__":"""
			10
		(0)------->(3)
		|		 /|\
		5 |		 |
		|		 | 1
		\|/		 |
		(1)------->(2)
			3		 """
graph = [[0, 5, INF, 10],
		[INF, 0, 3, INF],
		[INF, INF, 0, 1],
		[INF, INF, INF, 0]
		]
# Function call
floydWarshall(graph)

'''
N = 4
ld = [0] * 30


rd = [0] * 30
cl = [0] * 30
def printSolution(board):
	for i in range(N):
		for j in range(N):
			print(board[i][j], end = " ")
		print()


def solveNQUtil(board, col):
	
	if (col >= N):
		return True
	
	for i in range(N):
		
		if ((ld[i - col + N - 1] != 1 and
			rd[i + col] != 1) and cl[i] != 1):
				
			board[i][col] = 1
			ld[i - col + N - 1] = rd[i + col] = cl[i] = 1
			
			if (solveNQUtil(board, col + 1)):
				return True
				
			board[i][col] = 0 
			ld[i - col + N - 1] = rd[i + col] = cl[i] = 0
			
	return False
	

def solveNQ():
	board = [[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0]]
	if (solveNQUtil(board, 0) == False):
		printf("Solution does not exist")
		return False
	printSolution(board)
	return True
	
solveNQ()

'''






def is_attack(i, j, board, N):
  # checking for column j
  for k in range(1, i):
    if(board[k][j] == 1):
      return True

  # checking upper right diagonal
  k = i-1
  l = j+1
  while (k>=1 and l<=N):
    if (board[k][l] == 1):
      return True
    k=k+1
    l=l+1

  # checking upper left diagonal
  k = i-1
  l = j-1
  while (k>=1 and l>=1):
    if (board[k][l] == 1):
      return True
    k=k-1
    l=l-1

  return False

def n_queen(row, n, N, board):
  if (n==0):
    return True

  for j in range(1, N+1):
    if(not(is_attack(row, j, board, N))):
      board[row][j] = 1

      if (n_queen(row+1, n-1, N, board)):
        return True

      board[row][j] = 0 #backtracking
  return False

if __name__ == '__main__':
  board = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]

  n_queen(1, 4, 4, board)

  #printing the matix
  for i in range(1, 5):
      print(board[i][1:])

'''
#include<iostream>
using namespace std;
#define N 8

void printBoard(int board[N][N]) {
   for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++)
         cout << board[i][j] << " ";
      cout << endl;
   }
}

bool isValid(int board[N][N], int row, int col) {
   for (int i = 0; i < col; i++)    //check whether there is queen in the left or not
      if (board[row][i])
         return false;
   for (int i=row, j=col; i>=0 && j>=0; i--, j--)
      if (board[i][j])       //check whether there is queen in the left upper diagonal or not
         return false;
   for (int i=row, j=col; j>=0 && i<N; i++, j--)
      if (board[i][j])      //check whether there is queen in the left lower diagonal or not
         return false;
   return true;
}

bool solveNQueen(int board[N][N], int col) {
   if (col >= N)           //when N queens are placed successfully
      return true;
   for (int i = 0; i < N; i++) {     //for each row, check placing of queen is possible or not
      if (isValid(board, i, col) ) {
         board[i][col] = 1;      //if validate, place the queen at place (i, col)
         if ( solveNQueen(board, col + 1))    //Go for the other columns recursively
            return true;
                   
         board[i][col] = 0;        //When no place is vacant remove that queen
      }
   }
   return false;       //when no possible order is found
}

bool checkSolution() {
   int board[N][N];
   for(int i = 0; i<N; i++)
      for(int j = 0; j<N; j++)
         board[i][j] = 0;      //set all elements to 0
               
   if ( solveNQueen(board, 0) == false ) {     //starting from 0th column
      cout << "Solution does not exist";
      return false;
   }
   printBoard(board);
   return true;
}

int main() {
   checkSolution();
}
'''

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//Number of vertices
#define numOfVertices 5

// 0 - Green, 1 - Blue
char colors[][30] = {"Green", "Blue"};
int color_used = 2;
int colorCount;

//Graph connections
int graph[numOfVertices][numOfVertices] =  {{0, 1, 0, 1},
                                            {1, 0, 1, 0},
                                            {0, 1, 0, 1},
                                            {1, 0, 1, 0}};

//Vertex
typedef struct{
    char name;
    bool colored;
    int color;
} Vertex;

//VertexList
Vertex *vertexArray[numOfVertices];

//function check if a vertex has any uncolored neighbors
int hasUncoloredNeighbours(int idx){
  for(int i=0;i<numOfVertices; i++){
    if(graph[idx][i] == 1 && vertexArray[i]->colored == false)
      return i;
  }
  return -1;
}

//Function to check whether it is valid to color with color[colorIndex]
 bool canColorWith(int colorIndex, int vertex) {
    Vertex *neighborVertex;
    for(int i=0; i<numOfVertices; i++){
      //skipping if vertex are not connected
      if(graph[vertex][i] == 0) continue;

      neighborVertex = vertexArray[i];
      if(neighborVertex->colored && neighborVertex->color == colorIndex)
          return  false;
    }

    return true;
}

//function to color the vertex
bool setColors(int idx){
  int colorIndex, unColoredIdx;

    //Step: 1
    for (colorIndex=0; colorIndex<color_used; colorIndex++){
      // Step-1.1 : checking validity
      if(!canColorWith(colorIndex, idx)) continue; 

      //Step-1.2 : coloring
      vertexArray[idx]->color =  colorIndex;
      vertexArray[idx]->colored = true;
      colorCount++;

      //Step-1.3 : Whether all vertices colored?
      if(colorCount == numOfVertices ) //Base Case
          return true;

      //Step-1.4 : Next uncolored vertex
      while((unColoredIdx = hasUncoloredNeighbours(idx)) != -1){
        if(setColors(unColoredIdx))
          return true;
      }

    }

    // Step-2 : Backtracking
    vertexArray[idx]->color = -1;
    vertexArray[idx]->colored = false;
    return false;
}


int main()
{
  //define Vertex
  Vertex vertexA, vertexB, vertexC, vertexD , vertexE;
  vertexA.name = 'A';
  vertexB.name = 'B';
  vertexC.name = 'C';
  vertexD.name = 'D';
  vertexE.name = 'E';

  //add veritces to the array
  vertexArray[0] = &vertexA;
  vertexArray[1] = &vertexB;
  vertexArray[2] = &vertexC;
  vertexArray[3] = &vertexD;

  //set default values (uncolor) for all vertices
  for(int i=0; i<numOfVertices;i++){
    vertexArray[i]->colored = false;
    vertexArray[i]->color = -1;
  }

  //start coloring with first vertex
  bool hasSolution = setColors(0);

  //check if all vertices was successfully colored
  if (!hasSolution)
      printf("No Solution");
  else {
      for(int i=0; i<numOfVertices;i++){
          printf("%c %s \n",vertexArray[i]->name,colors[vertexArray[i]->color]);
      }
  }

  return 0;
}

# The longest common subsequence in Python


# Function to find lcs_algo
def lcs_algo(S1, S2, m, n):
    L = [[0 for x in range(n+1)] for x in range(m+1)]

    # Building the mtrix in bottom-up way
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                L[i][j] = 0
            elif S1[i-1] == S2[j-1]:
                L[i][j] = L[i-1][j-1] + 1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])

    index = L[m][n]

    lcs_algo = [""] * (index+1)
    lcs_algo[index] = ""

    i = m
    j = n
    while i > 0 and j > 0:

        if S1[i-1] == S2[j-1]:
            lcs_algo[index-1] = S1[i-1]
            i -= 1
            j -= 1
            index -= 1

        elif L[i-1][j] > L[i][j-1]:
            i -= 1
        else:
            j -= 1
            
    # Printing the sub sequences
    print("S1 : " + S1 + "\nS2 : " + S2)
    print("LCS: " + "".join(lcs_algo))


S1 = "ACADAABEFACADFDD"
S2 = "CAFAD"
m = len(S1)
n = len(S2)
lcs_algo(S1, S2, m, n)

#allpairsshortestpath

inf = 999999999
v = 4

def shortestpath(graph,v):
    g = graph
    for k in range(v):
        for i in range(v):
            for j in range(v):
                g[i][j] = min(g[i][j], g[i][k] + g[k][j])
    return g
   

graph1 = [[0,1,6,inf],
         [5,0,inf,inf],
         [2,3,0,inf],
         [inf,inf,inf,0]]

graph2 = [[0,5,inf,10],
          [inf,0,3,inf],
          [inf,inf,0,1],
          [inf,inf,inf,0]]


path = shortestpath(graph1,v)
for i in range(v):
    for j in range(v):
        if(path[i][j] == inf):
            print("inf", end=" ")
        else:
            print(path[i][j], end=" ")
    if j == v-1:
        print()
	
	#travellingsalesmanproblem

def findMinRoute(graph):
    #variable to store route's weight
    weight = 0      
    counter = 0
    i = 0
    j = 0
    inf = 999999999
    visitedRouteList = {}
    visitedRouteList[0] = 1
   
    route = [0] * len(graph)
   
    while i < len(graph) and j < len(graph[i]):
        if counter >= len(graph[i]) - 1:
            break
        if j!=i and j not in visitedRouteList:
            if graph[i][j] < inf:
                inf = graph[i][j]
                route[counter] = j + 1
        j += 1
        if j == len(graph[i]):
            weight += inf
            inf = 999999999
            visitedRouteList[route[counter] - 1] = 1
            j = 0
            i = route[counter] - 1
            counter += 1
   
    i = route[counter - 1] - 1
    for  j in range(0, len(graph)):
        if i != j and graph[i][j] < inf:
            inf = graph[i][j]
            route[counter] = j + 1
       
    weight += inf
    print(weight)
   
graph =  [[-1, 10, 15, 20],
        [10, -1, 35, 25],
[15, 35, -1, 3],
        [20, 25, 30, -1]]

findMinRoute(graph)




'''



from sys import maxsize
from itertools import permutations
V = 4

def travellingSalesmanProblem(graph, s):
	vertex = []
	for i in range(V):
		if i != s:
			vertex.append(i)

	min_path = maxsize
	next_permutation=permutations(vertex)
	for i in next_permutation:
		current_pathweight = 0
		k = s
		for j in i:
			current_pathweight += graph[k][j]
			k = j
		current_pathweight += graph[k][s]
		min_path = min(min_path, current_pathweight)
		
	return min_path


if _name_ == "_main_":
	graph = [[0, 10, 15, 20], [10, 0, 35, 25],
			[15, 35, 0, 30], [20, 25, 30, 0]]
	s = 0
	print(travellingSalesmanProblem(graph, s))


'''
